1.Brute force approach

concept:-
1.find the path of both given node and store in array/vector.

2.run loop find last common node in both vector and return it.

class Solution {
public:
    bool rton(TreeNode *root,TreeNode *p,vector<TreeNode *>&arr){
        if(root==NULL)return false;
        arr.push_back(root);
        if(root==p)return true;
        
        if(rton(root->left,p,arr)||rton(root->right,p,arr))
            return true;
        arr.pop_back();
        return false;
    }
    
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        vector<TreeNode *>p1,q1;
        rton(root,p,p1);
        rton(root,q,q1);
        int n=p1.size();
        int m=q1.size();
        int i=0;
        while(i<n && i<m){
            if(p1[i]!=q1[i])
                break;
         i++;   
        }
        return p1[i-1];
    }
};

2.method optimal approach

concept:- we go to left and if we find the element we are looking 
         we return the that if 
         assume for 3 element of binary tree 
         on left you get what you are looking for and on right you don't find
         then you will return on three case 
         if found retun found one if both found return root 

   code is self explanatory

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root==NULL || root==p || root==q)
            return root;
        TreeNode *left=lowestCommonAncestor(root->left,p,q);
        TreeNode *right=lowestCommonAncestor(root->right,p,q);
        if(left==NULL)
            return right;
        else if(right==NULL)
            return left;
        else
            return root;
    }
};
